@page "/approval-requests"
@using CRM.Models
@using Microsoft.EntityFrameworkCore
@using System.Linq.Expressions
@inject CRM.Services.IRepository _repository;

<PageTitle>Approval Requests</PageTitle>

<h3>Approval Request</h3>

<FluentDataGrid Items="@FilteredItems" ResizableColumns="true" Pagination="@pagination" TGridItem="ApprovalRequest">
    <PropertyColumn Property="@(p => p.Approver.FullName)" Title="Approver" Sortable="true" />
    <PropertyColumn Property="@(p=>p.LeaveRequest.Id)" Title="Request ID" Sortable="true" />
    <PropertyColumn Property="@(p => p.Status)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Comment)" Class="multiline-text" />
</FluentDataGrid>
<FluentPaginator State="@pagination" />


@code {
    private IQueryable<ApprovalRequest>? _items;
    private string nameFilter = string.Empty;
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private IQueryable<ApprovalRequest>? FilteredItems => _items.Where(p => EF.Functions.ILike(p.Approver.FullName.ToString(), $"%{nameFilter}%"));

    protected override void OnInitialized() =>
        _items = _repository.Get<ApprovalRequest>(
            null,
            null,
            true,
            nameof(ApprovalRequest.Approver),
            nameof(ApprovalRequest.LeaveRequest)
        );

    private void HandleNameFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private GridSort<T> HandleSort<T>(Expression<Func<T, object>> filter)
        => GridSort<T>.ByAscending(filter);
}
