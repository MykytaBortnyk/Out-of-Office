@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager

<FluentLayout>
    <FluentHeader>
        CRM
        <FluentSpacer />
        <div class="header-items">
            <AuthorizeView>
                <Authorized>
                    <AppHeader @rendermode="InteractiveServer"
                               FullName="@_user?.Employee.ToString()"
                               UserName="@HttpContext.User?.Identity?.Name" />
                    <form action="/Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Outline" Title="Log out">
                            <FluentIcon Value="@(new Icons.Regular.Size20.SignOut())" Color="@Color.Fill" />
                        </FluentButton>
                    </form>
                </Authorized>
                <NotAuthorized>
                    <FluentNavLink Href="/Account/Register">Register</FluentNavLink>
                    <FluentNavLink Href="/Account/Login">Login</FluentNavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent Class="body-content">
            <FluentDialogProvider />
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        <FluentSpacer />
        <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    private string? currentUrl;
    private ApplicationUser _user { get; set; }

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null)
        {
            _user = await UserManager.GetUserAsync(HttpContext.User);
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}